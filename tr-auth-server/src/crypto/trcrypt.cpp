/*
 *  trcrypt.cpp
 *  tr-auth-server
 *
 *  Created by Markus Mannel on 31.05.11.
 *  Copyright 2011 InfiniteRasa. All rights reserved.
 *
 */

#include "trcrypt.h"

using namespace tr::crypto;

#pragma mark TR Data

unsigned char CTRCrypt::DecArray1[0x38] =
{
	0x39,0x31,0x29,0x21,0x19,0x11,0x09,0x01,0x3A,0x32,0x2A,0x22,0x1A,0x12,0x0A,0x02,
	0x3B,0x33,0x2B,0x23,0x1B,0x13,0x0B,0x03,0x3C,0x34,0x2C,0x24,0x3F,0x37,0x2F,0x27,
	0x1F,0x17,0x0F,0x07,0x3E,0x36,0x2E,0x26,0x1E,0x16,0x0E,0x06,0x3D,0x35,0x2D,0x25,
	0x1D,0x15,0x0D,0x05,0x1C,0x14,0x0C,0x04
};

unsigned char CTRCrypt::DecArray2_CEA3D0[0x10] =
{
	0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01
};

unsigned char CTRCrypt::DecArray3[0x10] =
{
	0x01,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x0F,0x11,0x13,0x15,0x17,0x19,0x1B,0x1C
};

unsigned char CTRCrypt::DecArray4_CEA180[48] =
{
	0x0E,0x11,0x0B,0x18,0x01,0x05,0x03,0x1C,0x0F,0x06,0x15,0x0A,0x17,0x13,0x0C,0x04,0x1A,0x08,0x10,0x07,0x1B,0x14,0x0D,0x02,0x29,0x34,0x1F,0x25,0x2F,0x37,0x1E,0x28,0x33,0x2D,0x21,0x30,0x2C,0x31,0x27,0x38,0x22,0x35,0x2E,0x2A,0x32,0x24,0x1D,0x20
};

unsigned char CTRCrypt::DecArray5_CEA3B0[32] =
{
	0x10,0x07,0x14,0x15,0x1D,0x0C,0x1C,0x11,0x01,0x0F,0x17,0x1A,0x05,0x12,0x1F,0x0A,0x02,0x08,0x18,0x0E,0x20,0x1B,0x03,0x09,0x13,0x0D,0x1E,0x06,0x16,0x0B,0x04,0x19
};

unsigned int CTRCrypt::DecArray6_CEA3F0[4] =
{
	8,4,2,1
};


unsigned char CTRCrypt::CEA1B0_DATA[16*64] =
{
	0x0E,0x04,0x0D,0x01,0x02,0x0F,0x0B,0x08,0x03,0x0A,0x06,0x0C,0x05,0x09,0x00,0x07,0x00,0x0F,0x07,0x04,0x0E,0x02,0x0D,0x01,0x0A,0x06,0x0C,0x0B,0x09,0x05,0x03,0x08,0x04,0x01,0x0E,0x08,0x0D,0x06,0x02,0x0B,0x0F,0x0C,0x09,0x07,0x03,0x0A,0x05,0x00,0x0F,0x0C,0x08,0x02,0x04,0x09,0x01,0x07,0x05,0x0B,0x03,0x0E,0x0A,0x00,0x06,0x0D,0x0F,0x01,0x08,0x0E,0x06,0x0B,0x03,0x04,0x09,0x07,0x02,0x0D,0x0C,0x00,0x05,0x0A,0x03,0x0D,0x04,0x07,0x0F,0x02,0x08,0x0E,0x0C,0x00,0x01,0x0A,0x06,0x09,0x0B,0x05,0x00,0x0E,0x07,0x0B,0x0A,0x04,0x0D,0x01,0x05,0x08,0x0C,0x06,0x09,0x03,0x02,0x0F,0x0D,0x08,0x0A,0x01,0x03,0x0F,0x04,0x02,0x0B,0x06,0x07,0x0C,0x00,0x05,0x0E,0x09,0x0A,0x00,0x09,0x0E,0x06,0x03,0x0F,0x05,0x01,0x0D,0x0C,0x07,0x0B,0x04,0x02,0x08,0x0D,0x07,0x00,0x09,0x03,0x04,0x06,0x0A,0x02,0x08,0x05,0x0E,0x0C,0x0B,0x0F,0x01,0x0D,0x06,0x04,0x09,0x08,0x0F,0x03,0x00,0x0B,0x01,0x02,0x0C,0x05,0x0A,0x0E,0x07,0x01,0x0A,0x0D,0x00,0x06,0x09,0x08,0x07,0x04,0x0F,0x0E,0x03,0x0B,0x05,0x02,0x0C,0x07,0x0D,0x0E,0x03,0x00,0x06,0x09,0x0A,0x01,0x02,0x08,0x05,0x0B,0x0C,0x04,0x0F,0x0D,0x08,0x0B,0x05,0x06,0x0F,0x00,0x03,0x04,0x07,0x02,0x0C,0x01,0x0A,0x0E,0x09,0x0A,0x06,0x09,0x00,0x0C,0x0B,0x07,0x0D,0x0F,0x01,0x03,0x0E,0x05,0x02,0x08,0x04,0x03,0x0F,0x00,0x06,0x0A,0x01,0x0D,0x08,0x09,0x04,0x05,0x0B,0x0C,0x07,0x02,0x0E,0x02,0x0C,0x04,0x01,0x07,0x0A,0x0B,0x06,0x08,0x05,0x03,0x0F,0x0D,0x00,0x0E,0x09,0x0E,0x0B,0x02,0x0C,0x04,0x07,0x0D,0x01,0x05,0x00,0x0F,0x0A,0x03,0x09,0x08,0x06,0x04,0x02,0x01,0x0B,0x0A,0x0D,0x07,0x08,0x0F,0x09,0x0C,0x05,0x06,0x03,0x00,0x0E,0x0B,0x08,0x0C,0x07,0x01,0x0E,0x02,0x0D,0x06,0x0F,0x00,0x09,0x0A,0x04,0x05,0x03,0x0C,0x01,0x0A,0x0F,0x09,0x02,0x06,0x08,0x00,0x0D,0x03,0x04,0x0E,0x07,0x05,0x0B,0x0A,0x0F,0x04,0x02,0x07,0x0C,0x09,0x05,0x06,0x01,0x0D,0x0E,0x00,0x0B,0x03,0x08,0x09,0x0E,0x0F,0x05,0x02,0x08,0x0C,0x03,0x07,0x00,0x04,0x0A,0x01,0x0D,0x0B,0x06,0x04,0x03,0x02,0x0C,0x09,0x05,0x0F,0x0A,0x0B,0x0E,0x01,0x07,0x06,0x00,0x08,0x0D,0x04,0x0B,0x02,0x0E,0x0F,0x00,0x08,0x0D,0x03,0x0C,0x09,0x07,0x05,0x0A,0x06,0x01,0x0D,0x00,0x0B,0x07,0x04,0x09,0x01,0x0A,0x0E,0x03,0x05,0x0C,0x02,0x0F,0x08,0x06,0x01,0x04,0x0B,0x0D,0x0C,0x03,0x07,0x0E,0x0A,0x0F,0x06,0x08,0x00,0x05,0x09,0x02,0x06,0x0B,0x0D,0x08,0x01,0x04,0x0A,0x07,0x09,0x05,0x00,0x0F,0x0E,0x02,0x03,0x0C,0x0D,0x02,0x08,0x04,0x06,0x0F,0x0B,0x01,0x0A,0x09,0x03,0x0E,0x05,0x00,0x0C,0x07,0x01,0x0F,0x0D,0x08,0x0A,0x03,0x07,0x04,0x0C,0x05,0x06,0x0B,0x00,0x0E,0x09,0x02,0x07,0x0B,0x04,0x01,0x09,0x0C,0x0E,0x02,0x00,0x06,0x0A,0x0D,0x0F,0x03,0x05,0x08,0x02,0x01,0x0E,0x07,0x04,0x0A,0x08,0x0D,0x0F,0x0C,0x09,0x00,0x03,0x05,0x06,0x0B
};

unsigned char CTRCrypt::DecArrayOut1_D23548[0x38];
unsigned char CTRCrypt::DecArrayOut2_D1E4B0[0x38];
unsigned char CTRCrypt::DecArrayOut3_D1ECE8[4096*4];

unsigned char CTRCrypt::InputData_0CEA0B8[0x40] =
{
	0x3A,0x32,0x2A,0x22,0x1A,0x12,0x0A,0x02,0x3C,0x34,0x2C,0x24,0x1C,0x14,0x0C,0x04,0x3E,0x36,0x2E,0x26,0x1E,0x16,0x0E,0x06,0x40,0x38,0x30,0x28,0x20,0x18,0x10,0x08,
	0x39,0x31,0x29,0x21,0x19,0x11,0x09,0x01,0x3B,0x33,0x2B,0x23,0x1B,0x13,0x0B,0x03,0x3D,0x35,0x2D,0x25,0x1D,0x15,0x0D,0x05,0x3F,0x37,0x2F,0x27,0x1F,0x17,0x0F,0x07
};

unsigned char CTRCrypt::InputData_0CEA0F8[0x40] =
{
	0x28,0x08,0x30,0x10,0x38,0x18,0x40,0x20,0x27,0x07,0x2F,0x0F,0x37,0x17,0x3F,0x1F,0x26,0x06,0x2E,0x0E,0x36,0x16,0x3E,0x1E,0x25,0x05,0x2D,0x0D,0x35,0x15,0x3D,0x1D,
	0x24,0x04,0x2C,0x0C,0x34,0x14,0x3C,0x1C,0x23,0x03,0x2B,0x0B,0x33,0x13,0x3B,0x1B,0x22,0x02,0x2A,0x0A,0x32,0x12,0x3A,0x1A,0x21,0x01,0x29,0x09,0x31,0x11,0x39,0x19
};

unsigned char CTRCrypt::OutputData_D1E4E8[128*16];
unsigned char CTRCrypt::OutputData_D22D48[128*16];

#pragma mark -
#pragma mark TR Functions


void CTRCrypt::TRInit()
{
	TRPrepareBasic(this->OutputData_D22D48, this->InputData_0CEA0B8);
	TRPrepareBasic(this->OutputData_D1E4E8, this->InputData_0CEA0F8);
	//We have the super secure key hardcoded
	unsigned char Key64[8] = {'T','E','S','T',0,0,0,0};
	TRKeyIntegrate(Key64);
	TRKeyIntegrate2();
	TRKeyIntegrate3();
}

void CTRCrypt::TREncrypt(unsigned char *Data, unsigned int Len)
{
	Len &= ~7;
	sub_A7E190_1(Data, Len, 1);
}

void CTRCrypt::TRDecrypt(unsigned char *Data, unsigned int Len)
{
	Len &= ~7;
	sub_A7E190_1(Data, Len, 0);
}

int __cdecl CTRCrypt::TRPrepareBasic(unsigned char *Output, unsigned char *Input)
{
	int result;
	signed int v3;
	signed int v4;
	signed int v5;
	signed int v6;
	int v7;
	
	v3 = 0;
	while ( v3 < 16 )
	{
	    v4 = 0;
	    while ( v4 < 16 )
	    {
			v5 = 0;
			while (v5 < 8)
			{
				*(&Output[128 * v3] + 8 * v4 + v5++) = 0;
			}
			++v4;
		}
		result = v3++ + 1;
	}
	v3 = 0;
	while (v3 < 16)
	{
	    v4 = 0;
	    while (v4 < 16)
	    {
			v5 = 0;
			while (v5 < 64)
			{
				v6 = Input[v5] - 1;
				if (v6 >> 2 == v3)
				{
					if (this->DecArray6_CEA3F0[v6 & 3] & v4)
					{
						v7 = v5 & 7;
			            *(&Output[128 * v3] + 8 * v4 + (v5 >> 3)) |= (unsigned char)(this->DecArray2_CEA3D0[v5 & 7]);
					}
				}
				++v5;
			}
			result = v4++ + 1;
		}
		++v3;
	}
	return result;
}

void __cdecl CTRCrypt::TRKeyIntegrate(unsigned char *Key)
{
	// fsdf optimize this!
	int result;
	int v2;
	int v3;
	int v4;
	int v6;
	
	v2 = 0;
	for(int i=0; i<56; i++)
	{
		v3 = this->DecArray1[i] - 1;
		v4 = v3 & 7;
		this->DecArrayOut1_D23548[i] = (this->DecArray2_CEA3D0[v3 & 7] & Key[v3 >> 3]) != 0;
	}
	
	for(int i=0; i<16; i++)
	{
		memset((void*)&this->DecStruct1[i], 0x00, sizeof(_DecStruct1T));
	}
	
	for(int i=0; i<16; i++)
	{
		for(int i2=0; i2<56; i2++)
		{
			v3 = i2 + this->DecArray3[i];
			if ( (unsigned int)v3 >= (((i2 >= 28) - 1) & 0xFFFFFFE4) + 56 )
			{
				v6 = v3 - 28;
			}
			else
			{
				v6 = v3;
			}
			result = v6;
			this->DecArrayOut2_D1E4B0[i2] = this->DecArrayOut1_D23548[v6];
		}
		for(int i2=0; i2<48; i2++)
		{
			if( DecArray4_CEA180[i2] == 0 )
			{
				__debugbreak(); //Should not happen
			}
			if ( DecArrayOut2_D1E4B0[DecArray4_CEA180[i2]-1] )
			{
				DecStruct1[i].D1[i2>>3] += DecArray2_CEA3D0[i2 & 7];
			}
		}
	}
}

void __cdecl CTRCrypt::TRKeyIntegrate2()
{
	int v0;
	signed int v1;
	signed int v2;
	
	v1 = 0;
	while ( v1 < 4 )
	{
		v2 = 0;
		while ( v2 < 4096 )
		{
			v0 = 16 * sub_A7D470(2 * v1, v2 >> 6);
			this->DecArrayOut3_D1ECE8[4096 * v1 + v2] = sub_A7D470(2 * v1 + 1, v2 & 0x3F) & 0xF | (unsigned char)v0;
			++v2;
		}
		++v1;
	}
}

int __cdecl CTRCrypt::TRKeyIntegrate3()
{
	int result;
	signed int v1;
	signed int v2;
	signed int v3;
	signed int v4;
	int v5;
	
	v1 = 0;
	while ( v1 < 4 )
	{
		v2 = 0;
		while ( v2 < 256 )
		{
			v3 = 0;
			while ( v3 < 4 )
			{
				this->DecStruct3_D1D4B0[v1].D1[4 * v2 + v3++] = 0;
			}
			++v2;
		}
		result = v1++ + 1;
	}
	v1 = 0;
	while ( v1 < 4 )
	{
		v2 = 0;
		while ( v2 < 256 )
		{
			v3 = 0;
			while ( v3 < 32 )
			{
				v4 = this->DecArray5_CEA3B0[v3] - 1;
				if ( v4 >> 3 == v1 )
				{
					if ( this->DecArray2_CEA3D0[v4 & 7] & v2 )
					{
						v5 = v3 & 7;
						this->DecStruct3_D1D4B0[v1].D1[4 * v2 + (v3 >> 3)] |= (unsigned char)(this->DecArray2_CEA3D0[v3 & 7]);
					}
				}
				++v3;
			}
			result = v2++ + 1;
		}
		++v1;
	}
	return result;
}

int __cdecl CTRCrypt::sub_A7D470(int a1, int a2)
{
	int v3;
	int v4;
	
	v3 = a2 & 1 | ((a2 & 0x20) >> 4);
	v4 = (a2 & 0x1F) >> 1;
	return this->DecStruct2_CEA1B0[a1].D1[16 * (a2 & 1 | ((a2 & 0x20) >> 4)) + ((a2 & 0x1F) >> 1)];
}

int __cdecl CTRCrypt::sub_A7D8D0_3(unsigned char *DataP, unsigned char *B_, unsigned char *Out)
{
	int result;
	signed int v4;
	unsigned char *v5;
	unsigned char *v6;
	signed int v7;
	unsigned char *v8;
	unsigned char *v9;
	
	v4 = 0;
	result = (int)((long)Out);
	v5 = Out;
	while ( v4 < 8 )
	{
		*v5 = 0;
		result = (int)((long)(v5++ + 1));
		++v4;
	}
	v6 = DataP;
	v7 = 0;
	while ( v7 < 16 )
	{
		v5 = Out;
		v8 = &B_[128 * v7] + 8 * (((signed int)*v6 >> 4) & 0xF);
		v9 = &B_[128 * (v7 + 1)] + 8 * (*v6 & 0xF);
		v4 = 0;
		while ( v4 < 8 )
		{
			*v5++ |= *v9++ | *v8++;
			++v4;
		}
		v7 += 2;
		result = (int)((long)(v6++ + 1));
	}
	return result;
}

int __cdecl CTRCrypt::sub_A7D790(unsigned char *a1, unsigned char *a2)
{
	int result;
	unsigned char *v3;
	unsigned char *v4;
	signed int v5;
	unsigned char *v6;
	
	v3 = a2;
	*a2 = 0;
	++v3;
	*v3++ = 0;
	*v3++ = 0;
	*v3 = 0;
	result = (int)((long)a1);
	v4 = a1;
	v5 = 0;
	
	while ( v5 < 4 )
	{
		v6 = &this->DecStruct3_D1D4B0[v5].D1[4 * *v4];
		v3 = a2;
		*a2 |= *v6++;
		++v3;
		*v3++ |= *v6++;
		*v3++ |= *v6++;
		result = (int)((long)v3);
		*v3 |= *v6;
		++v5;
		++v4;
	}
	return result;
}

int __cdecl CTRCrypt::sub_A7D4B0(unsigned char *a1, unsigned char *a2)
{
	unsigned char *v3;
	int v4;
	unsigned int v5;
	int v6;
	int v7;
	unsigned int v8;
	int v9;
	unsigned char *v10;
	
	v3 = a1;
	v4 = *a1;
	v3 = a1 + 1;
	v5 = *(a1 + 1);
	v3 = a1 + 2;
	v6 = *(a1 + 2);
	v3 = a1 + 3;
	v7 = *(a1 + 3);
	v3 = a1 + 4;
	v8 = *(a1 + 4);
	v3 = a1 + 5;
	v9 = *(a1 + 5);
	v3 = a1 + 6;
	v10 = a2;
	
	*a2 = this->DecArrayOut3_D1ECE8[(((unsigned int)v5 >> 4) & 0xF | (unsigned short)(16 * (unsigned short)v4)) & 0xFFF];
	++v10;
	*v10++ = this->DecArrayOut3_D1ECE8[0x1000 + (((unsigned char)v6 | (unsigned short)((unsigned short)v5 << 8)) & 0xFFF)];
	*v10++ = this->DecArrayOut3_D1ECE8[0x2000 + ((((unsigned int)v8 >> 4) & 0xF | (unsigned short)(16 * (unsigned short)v7)) & 0xFFF)];
	*v10 = this->DecArrayOut3_D1ECE8[0x3000 + (((unsigned char)v9 | (unsigned short)((unsigned short)v8 << 8)) & 0xFFF)];
	
	return (int)((long)(v10 + 1));
}

int __cdecl CTRCrypt::sub_A7D5E0_5(unsigned char *p1, unsigned char *p2)
{
	unsigned char *v3;
	unsigned char *v4;
	unsigned char v5;
	unsigned char v6;
	unsigned char v7;
	unsigned char v8;
	
	v3 = p2;
	v4 = p1;
	v5 = *p1;
	v4 = p1 + 1;
	v6 = *(p1 + 1);
	v4 = p1 + 2;
	v7 = *(p1 + 2);
	v4 = p1 + 3;
	v8 = *(p1 + 3);
	*v3++ = (unsigned char)((v5 & 0x18) >> 3) | (unsigned char)((unsigned char)((v5 & 0xF8) >> 1) | (unsigned char)((v8 & 1) << 7));
	*v3++ = (unsigned char)((v6 & 0xE0) >> 5) | (unsigned char)((unsigned char)(8 * (v5 & 1)) | (unsigned char)((unsigned char)((v6 & 0x80) >> 3) | (unsigned char)(32 * (v5 & 7))));
	*v3++ = (unsigned char)((v7 & 0x80) >> 7) | (unsigned char)((unsigned char)(2 * (v6 & 0x1F)) | (unsigned char)(8 * (v6 & 0x18)));
	*v3++ = (unsigned char)((v7 & 0x18) >> 3) | (unsigned char)((unsigned char)((v7 & 0xF8) >> 1) | (unsigned char)((v6 & 1) << 7));
	*v3++ = (unsigned char)((v8 & 0xE0) >> 5) | (unsigned char)((unsigned char)(8 * (v7 & 1)) | (unsigned char)((unsigned char)((v8 & 0x80) >> 3) | (unsigned char)(32 * (v7 & 7))));
	*v3 = (unsigned char)((v5 & 0x80) >> 7) | (unsigned char)((unsigned char)(2 * (v8 & 0x1F)) | (unsigned char)(8 * (v8 & 0x18)));
	
	return (int)((long)(v3 + 1));
}

int __cdecl CTRCrypt::sub_A7DA60_4(unsigned char *d, int idx, unsigned char *a3)
{
	unsigned char *v4;
	unsigned char v5[6];
	unsigned char *p2;
	unsigned char a1[6];
	unsigned char *v8;
	unsigned char a2[4];
	
	v4 = &this->DecStruct1[idx].D1[0];
	p2 = v5;
	v8 = a1;
	sub_A7D5E0_5(d, v5);
	*v8++ = *v4++ ^ *p2++;
	*v8++ = *v4++ ^ *p2++;
	*v8++ = *v4++ ^ *p2++;
	*v8++ = *v4++ ^ *p2++;
	*v8++ = *v4++ ^ *p2++;
	*v8++ = *v4++ ^ *p2++;
	sub_A7D4B0(a1, (unsigned char *)a2);
	
	return sub_A7D790((unsigned char *)a2, a3);
}

int __cdecl CTRCrypt::sub_A7DC90_3(int idx, unsigned char *m, unsigned char *m2)
{
	unsigned char *v4;
	unsigned char *v5;
	unsigned char v6[6];
	
	v4 = m2;
	v5 = m + 4;
	sub_A7DA60_4(m + 4, idx, v6);
	*v4++ = *v5++;
	*v4++ = *v5++;
	*v4++ = *v5++;
	*v4++ = *v5;
	m2[4] = m[0] ^ v6[0];
	m2[5] = m[1] ^ v6[1];
	m2[6] = m[2] ^ v6[2];
	m2[7] = m[3] ^ v6[3];
	
	return (int)((long)(v4 + 1));
}

unsigned int __cdecl CTRCrypt::sub_A7DE00_2(unsigned char *DataP1, unsigned char *DataP2)
{
	unsigned int v4;
	unsigned char v5[128+8];
	unsigned char v7[8];
	
	sub_A7D8D0_3(DataP1, OutputData_D22D48, v5);
	v4 = 0;
	while ( v4 < 16 )
	{
	    sub_A7DC90_3(15 - v4, &v5[8 * v4], &v5[8 * v4 + 8]);
	    ++v4;
	}
	v7[0] = v5[0x84];
	v7[1] = v5[0x85];
	v7[2] = v5[0x86];
	v7[3] = v5[0x87];
	v7[4] = v5[0x80];
	v7[5] = v5[0x81];
	v7[6] = v5[0x82];
	v7[7] = v5[0x83];
	
	return sub_A7D8D0_3(v7, OutputData_D1E4E8, DataP2);
}

int __cdecl CTRCrypt::sub_A7DFD0(unsigned char *a1, unsigned char *a2)
{
	unsigned char M2[128 + 8];
	int idx;
	unsigned char v7[8];
	
	sub_A7D8D0_3(a1, this->OutputData_D22D48, M2);
	idx = 0;
	while ( idx < 16 )
	{
	    sub_A7DC90_3(idx, &M2[8 * idx], &M2[8 * idx + 8]);
	    ++idx;
	}
	v7[0] = M2[0x84];
	v7[1] = M2[0x85];
	v7[2] = M2[0x86];
	v7[3] = M2[0x87];
	v7[4] = M2[0x80];
	v7[5] = M2[0x81];
	v7[6] = M2[0x82];
	v7[7] = M2[0x83];
	
	return sub_A7D8D0_3(v7, this->OutputData_D1E4E8, a2);
}

int __cdecl CTRCrypt::sub_A7E190_1(unsigned char *Data, int Len, int State)
{
	int result;
	unsigned char *DataP;
	
	result = (int)((long)Data);
	DataP = Data;
	while ( Len > 0 )
	{
	    if ( State )
		{
			result = sub_A7DFD0(DataP, DataP);
		}
		else
		{
			result = sub_A7DE00_2(DataP, DataP);
		}
		Len -= 8;
		DataP += 8;
	}
	
	return result;
}